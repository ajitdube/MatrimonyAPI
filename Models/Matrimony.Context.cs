

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace MatrimonyAPI.Models
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class MatrimonydbEntities : DbContext
{
    public MatrimonydbEntities()
        : base("name=MatrimonydbEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Annualincome> Annualincomes { get; set; }

    public virtual DbSet<BodyType> BodyTypes { get; set; }

    public virtual DbSet<Complexion> Complexions { get; set; }

    public virtual DbSet<Education> Educations { get; set; }

    public virtual DbSet<EmploymentType> EmploymentTypes { get; set; }

    public virtual DbSet<FamilyDetail> FamilyDetails { get; set; }

    public virtual DbSet<FamilyStatu> FamilyStatus { get; set; }

    public virtual DbSet<FamilyType> FamilyTypes { get; set; }

    public virtual DbSet<Gender> Genders { get; set; }

    public virtual DbSet<Height> Heights { get; set; }

    public virtual DbSet<Language> Languages { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Occupation> Occupations { get; set; }

    public virtual DbSet<Otp> Otps { get; set; }

    public virtual DbSet<Package> Packages { get; set; }

    public virtual DbSet<PartnerPreferance> PartnerPreferances { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PermanantAddress> PermanantAddresses { get; set; }

    public virtual DbSet<PhysicalProfileInfo> PhysicalProfileInfoes { get; set; }

    public virtual DbSet<PhysicalStatu> PhysicalStatus { get; set; }

    public virtual DbSet<ProfileFor> ProfileFors { get; set; }

    public virtual DbSet<QA> QAs { get; set; }

    public virtual DbSet<Religion> Religions { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Star> Stars { get; set; }

    public virtual DbSet<sysdiagram> sysdiagrams { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserInterestedInProfile> UserInterestedInProfiles { get; set; }

    public virtual DbSet<UserPackage> UserPackages { get; set; }

    public virtual DbSet<UserPhoto> UserPhotoes { get; set; }

    public virtual DbSet<VendorForClient> VendorForClients { get; set; }

    public virtual DbSet<WorkAddress> WorkAddresses { get; set; }

    public virtual DbSet<Cast> Casts { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<District> Districts { get; set; }

    public virtual DbSet<State> States { get; set; }


    public virtual ObjectResult<AddupdateAnnualincome_Result> AddupdateAnnualincome(Nullable<int> id, string annualIncome, Nullable<int> createdBy, Nullable<int> modifiedBy)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var annualIncomeParameter = annualIncome != null ?
            new ObjectParameter("AnnualIncome", annualIncome) :
            new ObjectParameter("AnnualIncome", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var modifiedByParameter = modifiedBy.HasValue ?
            new ObjectParameter("ModifiedBy", modifiedBy) :
            new ObjectParameter("ModifiedBy", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddupdateAnnualincome_Result>("AddupdateAnnualincome", idParameter, annualIncomeParameter, createdByParameter, modifiedByParameter);
    }


    public virtual int SaveUser(Nullable<int> id, Nullable<int> roleId, Nullable<int> profileForId, Nullable<int> genderId, string fullName, Nullable<System.DateTime> dateOfBirth, Nullable<int> languageid, Nullable<int> religionId, Nullable<int> castId, Nullable<int> countryId, Nullable<int> stateId, Nullable<int> districtId, Nullable<int> cityId, string village, string postalCode, string mobileNumber, string emailId, string passwordHash, string securityStamp, Nullable<bool> emailConfirmed, Nullable<bool> mobileNumberConfirmed, Nullable<bool> isActive, Nullable<System.DateTime> dateCreated, Nullable<int> createdBy, Nullable<System.DateTime> dateModified, Nullable<int> modifiedBy)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var roleIdParameter = roleId.HasValue ?
            new ObjectParameter("RoleId", roleId) :
            new ObjectParameter("RoleId", typeof(int));


        var profileForIdParameter = profileForId.HasValue ?
            new ObjectParameter("ProfileForId", profileForId) :
            new ObjectParameter("ProfileForId", typeof(int));


        var genderIdParameter = genderId.HasValue ?
            new ObjectParameter("GenderId", genderId) :
            new ObjectParameter("GenderId", typeof(int));


        var fullNameParameter = fullName != null ?
            new ObjectParameter("FullName", fullName) :
            new ObjectParameter("FullName", typeof(string));


        var dateOfBirthParameter = dateOfBirth.HasValue ?
            new ObjectParameter("DateOfBirth", dateOfBirth) :
            new ObjectParameter("DateOfBirth", typeof(System.DateTime));


        var languageidParameter = languageid.HasValue ?
            new ObjectParameter("Languageid", languageid) :
            new ObjectParameter("Languageid", typeof(int));


        var religionIdParameter = religionId.HasValue ?
            new ObjectParameter("ReligionId", religionId) :
            new ObjectParameter("ReligionId", typeof(int));


        var castIdParameter = castId.HasValue ?
            new ObjectParameter("CastId", castId) :
            new ObjectParameter("CastId", typeof(int));


        var countryIdParameter = countryId.HasValue ?
            new ObjectParameter("CountryId", countryId) :
            new ObjectParameter("CountryId", typeof(int));


        var stateIdParameter = stateId.HasValue ?
            new ObjectParameter("StateId", stateId) :
            new ObjectParameter("StateId", typeof(int));


        var districtIdParameter = districtId.HasValue ?
            new ObjectParameter("DistrictId", districtId) :
            new ObjectParameter("DistrictId", typeof(int));


        var cityIdParameter = cityId.HasValue ?
            new ObjectParameter("CityId", cityId) :
            new ObjectParameter("CityId", typeof(int));


        var villageParameter = village != null ?
            new ObjectParameter("Village", village) :
            new ObjectParameter("Village", typeof(string));


        var postalCodeParameter = postalCode != null ?
            new ObjectParameter("PostalCode", postalCode) :
            new ObjectParameter("PostalCode", typeof(string));


        var mobileNumberParameter = mobileNumber != null ?
            new ObjectParameter("MobileNumber", mobileNumber) :
            new ObjectParameter("MobileNumber", typeof(string));


        var emailIdParameter = emailId != null ?
            new ObjectParameter("EmailId", emailId) :
            new ObjectParameter("EmailId", typeof(string));


        var passwordHashParameter = passwordHash != null ?
            new ObjectParameter("PasswordHash", passwordHash) :
            new ObjectParameter("PasswordHash", typeof(string));


        var securityStampParameter = securityStamp != null ?
            new ObjectParameter("SecurityStamp", securityStamp) :
            new ObjectParameter("SecurityStamp", typeof(string));


        var emailConfirmedParameter = emailConfirmed.HasValue ?
            new ObjectParameter("EmailConfirmed", emailConfirmed) :
            new ObjectParameter("EmailConfirmed", typeof(bool));


        var mobileNumberConfirmedParameter = mobileNumberConfirmed.HasValue ?
            new ObjectParameter("MobileNumberConfirmed", mobileNumberConfirmed) :
            new ObjectParameter("MobileNumberConfirmed", typeof(bool));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var dateCreatedParameter = dateCreated.HasValue ?
            new ObjectParameter("DateCreated", dateCreated) :
            new ObjectParameter("DateCreated", typeof(System.DateTime));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var dateModifiedParameter = dateModified.HasValue ?
            new ObjectParameter("DateModified", dateModified) :
            new ObjectParameter("DateModified", typeof(System.DateTime));


        var modifiedByParameter = modifiedBy.HasValue ?
            new ObjectParameter("ModifiedBy", modifiedBy) :
            new ObjectParameter("ModifiedBy", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveUser", idParameter, roleIdParameter, profileForIdParameter, genderIdParameter, fullNameParameter, dateOfBirthParameter, languageidParameter, religionIdParameter, castIdParameter, countryIdParameter, stateIdParameter, districtIdParameter, cityIdParameter, villageParameter, postalCodeParameter, mobileNumberParameter, emailIdParameter, passwordHashParameter, securityStampParameter, emailConfirmedParameter, mobileNumberConfirmedParameter, isActiveParameter, dateCreatedParameter, createdByParameter, dateModifiedParameter, modifiedByParameter);
    }


    public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
    }


    public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var new_diagramnameParameter = new_diagramname != null ?
            new ObjectParameter("new_diagramname", new_diagramname) :
            new ObjectParameter("new_diagramname", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
    }


    public virtual int sp_upgraddiagrams()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
    }


    public virtual ObjectResult<Nullable<int>> Validate_User(string username, string password)
    {

        var usernameParameter = username != null ?
            new ObjectParameter("Username", username) :
            new ObjectParameter("Username", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Validate_User", usernameParameter, passwordParameter);
    }


    public virtual ObjectResult<Nullable<int>> ValidateUser(string username, string password)
    {

        var usernameParameter = username != null ?
            new ObjectParameter("Username", username) :
            new ObjectParameter("Username", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ValidateUser", usernameParameter, passwordParameter);
    }

}

}

